{"version":3,"file":"static/js/452.6a595b32.chunk.js","mappings":"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","sources":["web3/connectors.js","components/connect/index.js","web3/hooks.js","pages/landing/styled.js","pages/landing/index.js","pages/landing/landing.js"],"sourcesContent":["/**\n * Define the properties for the metamask connnector\n */\nimport { InjectedConnector } from '@web3-react/injected-connector';\n\nconst SUPPORTED_CHAIN_IDS = [\n  1, // for mainnet\n  4, // for ropsten\n  42, // for kovan\n];\n\nexport const injected = new InjectedConnector({ supportedChainIds: SUPPORTED_CHAIN_IDS });\n","/**\n * A component which is essentially a button to connect to metamasl\n */\nimport React from 'react';\nimport { toast } from 'react-toastify';\nimport { useWeb3React } from '@web3-react/core';\n\nimport { useEagerConnect, useInactiveListener } from '../../web3/hooks';\nimport { injected } from '../../web3/connectors';\n\nimport './index.scss';\n\nexport default function Connect() {\n  const { connector, activate, active, error, account, deactivate } = useWeb3React();\n\n  const walletButtomClass = active ? '--active' : '';\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState();\n  React.useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]);\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector);\n\n  React.useEffect(() => {\n    if (!error) return;\n    let message;\n    if (error.name === 'UnsupportedChainIdError') {\n      message = 'Unsupported network, please connect to Ropsten network';\n    } else {\n      message = error.message;\n    }\n    toast.error(message, {\n      position: 'top-left',\n    });\n  }, [error]);\n\n  const connectWalletPressed = () => {\n    setActivatingConnector(injected);\n    activate(injected);\n  };\n\n  return (\n    <div className=\"metamask__window\">\n      <button\n        id=\"walletButton\"\n        className={walletButtomClass}\n        onClick={() => (active ? deactivate() : connectWalletPressed())}\n      >\n        <img src=\"/static/metamask.svg\" alt=\"metamask\"/>\n        {active && account.length > 0 ? (\n         ` ${account.slice(0, 4)}......${account.slice(38)}`\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n    </div>\n  );\n}\n","/**\n * Define the right hooks which would help automatically connect and disconnect from metamask\n */\nimport { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { injected } from \"./connectors\";\n\nexport function useEagerConnect() {\n\tconst { activate, active } = useWeb3React();\n\n\tconst [tried, setTried] = useState(false);\n\n\tuseEffect(() => {\n\t\tinjected.isAuthorized().then((isAuthorized) => {\n\t\t\tif (isAuthorized) {\n\t\t\t\tactivate(injected, undefined, true).catch(() => {\n\t\t\t\t\tsetTried(true);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsetTried(true);\n\t\t\t}\n\t\t});\n\t}, []); // intentionally only running on mount (make sure it's only mounted once :))\n\n\t// if the connection worked, wait until we get confirmation of that to flip the flag\n\tuseEffect(() => {\n\t\tif (!tried && active) {\n\t\t\tsetTried(true);\n\t\t}\n\t}, [tried, active]);\n\n\treturn tried;\n}\n\nexport function useInactiveListener(suppress = false) {\n\tconst { active, error, activate } = useWeb3React();\n\n\tuseEffect(() => {\n\t\tconst { ethereum } = window;\n\t\tif (ethereum && ethereum.on && !active && !error && !suppress) {\n\t\t\tconst handleConnect = () => {\n\t\t\t\tconsole.log(\"Handling 'connect' event\");\n\t\t\t\tactivate(injected);\n\t\t\t};\n\t\t\tconst handleChainChanged = (chainId) => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"Handling 'chainChanged' event with payload\",\n\t\t\t\t\tchainId\n\t\t\t\t);\n\t\t\t\tactivate(injected);\n\t\t\t};\n\t\t\tconst handleAccountsChanged = (accounts) => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"Handling 'accountsChanged' event with payload\",\n\t\t\t\t\taccounts\n\t\t\t\t);\n\t\t\t\tif (accounts.length > 0) {\n\t\t\t\t\tactivate(injected);\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst handleNetworkChanged = (networkId) => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"Handling 'networkChanged' event with payload\",\n\t\t\t\t\tnetworkId\n\t\t\t\t);\n\t\t\t\tactivate(injected);\n\t\t\t};\n\n\t\t\tethereum.on(\"connect\", handleConnect);\n\t\t\tethereum.on(\"chainChanged\", handleChainChanged);\n\t\t\tethereum.on(\"accountsChanged\", handleAccountsChanged);\n\t\t\tethereum.on(\"networkChanged\", handleNetworkChanged);\n\n\t\t\treturn () => {\n\t\t\t\tif (ethereum.removeListener) {\n\t\t\t\t\tethereum.removeListener(\"connect\", handleConnect);\n\t\t\t\t\tethereum.removeListener(\"chainChanged\", handleChainChanged);\n\t\t\t\t\tethereum.removeListener(\n\t\t\t\t\t\t\"accountsChanged\",\n\t\t\t\t\t\thandleAccountsChanged\n\t\t\t\t\t);\n\t\t\t\t\tethereum.removeListener(\n\t\t\t\t\t\t\"networkChanged\",\n\t\t\t\t\t\thandleNetworkChanged\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}, [active, error, suppress, activate]);\n}\n","import { styled } from '@mui/material/styles';\n\nexport const ContentStyle = styled('div')(({ theme }) => ({\n  maxWidth: 480,\n  margin: 'auto',\n  minHeight: '100vh',\n  display: 'flex',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  padding: theme.spacing(12, 0),\n}));\n","import Page404 from './landing';\n\nexport default Page404;\n","import { Link as RouterLink } from 'react-router-dom';\nimport { Button, Typography, Container, Box } from '@mui/material';\nimport Connect from 'components/connect';\nimport { ROUTES } from 'utils/constants';\nimport { ContentStyle } from './styled';\n\nconst Page404 = () => (\n  <Container style={{ background: 'white' }}>\n    <ContentStyle sx={{ textAlign: 'center', alignItems: 'center' }}>\n      <Typography variant=\"h3\" paragraph>\n        Sorry, Please connect your wallet to proceed!\n      </Typography>\n\n      <Typography sx={{ color: 'text.secondary' }}>\n        Sorry, In order to grant you access to the dashboard we would need to authenticate you via your address. Be sure\n        to connect with an authorized wallet.\n      </Typography>\n\n      <Box component=\"img\" src=\"/static/epnsbell.jpeg\" sx={{ height: 150, mx: 'auto', my: { xs: 5, sm: 10 } }} />\n\n      <Connect />\n    </ContentStyle>\n  </Container>\n);\n\nexport default Page404;\n"],"names":["injected","InjectedConnector","supportedChainIds","Connect","useWeb3React","connector","activate","active","error","account","deactivate","walletButtomClass","React","activatingConnector","setActivatingConnector","undefined","triedEager","useState","tried","setTried","useEffect","isAuthorized","then","catch","useEagerConnect","suppress","ethereum","window","on","handleConnect","console","log","handleChainChanged","chainId","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener","useInactiveListener","message","name","toast","position","className","id","onClick","src","alt","slice","ContentStyle","styled","maxWidth","margin","minHeight","display","justifyContent","flexDirection","padding","theme","spacing","Container","style","background","sx","textAlign","alignItems","Typography","variant","paragraph","color","Box","component","height","mx","my","xs","sm"],"sourceRoot":""}